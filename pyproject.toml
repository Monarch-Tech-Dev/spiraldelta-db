[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "spiraldelta-db"
version = "1.0.0"
description = "A geometric approach to vector database optimization through spiral ordering and multi-tier delta compression"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "AGPL-3.0"}
authors = [
    {name = "Monarch AI", email = "engineering@monarchai.com"},
]
maintainers = [
    {name = "Monarch AI", email = "engineering@monarchai.com"},
]
keywords = [
    "vector-database",
    "machine-learning", 
    "embeddings",
    "similarity-search",
    "compression",
    "geometric-algorithms",
    "spiral-ordering", 
    "delta-compression",
    "ai",
    "nlp",
    "deep-learning",
    "rag",
    "retrieval-augmented-generation",
    "semantic-search", 
    "vector-similarity",
    "hnsw",
    "product-quantization"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "Intended Audience :: Information Technology",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Jupyter",
    "Natural Language :: English",
    "Environment :: Console",
    "Environment :: GPU",
]

dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0", 
    "numba>=0.56.0",
    "hnswlib>=0.7.0",
    "requests>=2.25.0",
    "tqdm>=4.60.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "coverage>=7.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "coverage>=7.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0", 
    "myst-parser>=1.0.0",
]
performance = [
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "notebook>=6.5.0",
]

[project.urls]
Homepage = "https://github.com/monarch-ai/spiraldelta-db"
Documentation = "https://docs.spiraldelta.com"
Repository = "https://github.com/monarch-ai/spiraldelta-db"
"Bug Reports" = "https://github.com/monarch-ai/spiraldelta-db/issues"
Enterprise = "https://monarchai.com/spiraldelta-enterprise"

[project.scripts]
spiraldelta = "spiraldelta.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["spiraldelta"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "hnswlib.*",
    "numba.*",
    "scipy.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Test"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=spiraldelta",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
]

[tool.coverage.run]
source = ["src/spiraldelta"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]