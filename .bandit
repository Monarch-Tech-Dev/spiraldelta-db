[bandit]
# Bandit configuration for SpiralDeltaDB security scanning

# Exclude test files and example code from security scanning
exclude_dirs = tests,examples,scripts

# Skip specific security checks that are not relevant for our use case
skips = B101,B601

# Include specific tests
tests = B201,B301,B302,B303,B304,B305,B306,B307,B308,B309,B310,B311,B312,B313,B314,B315,B316,B317,B318,B319,B320,B321,B322,B323,B324,B401,B402,B403,B404,B405,B406,B407,B408,B409,B410,B411,B412,B413,B501,B502,B503,B504,B505,B506,B507,B601,B602,B603,B604,B605,B606,B607,B608,B609,B610,B611,B701,B702,B703

# Define medium and high severity levels
assert_used = {skip: false, message: "Use of assert detected"}
hardcoded_bind_all_interfaces = {skip: false, message: "Possible hardcoded 'bind all interfaces'"}
hardcoded_password_string = {skip: false, message: "Possible hardcoded password"}
hardcoded_password_funcarg = {skip: false, message: "Possible hardcoded password in function argument"}
hardcoded_password_default = {skip: false, message: "Possible hardcoded password in default argument"}
hardcoded_sql_expressions = {skip: false, message: "Possible SQL injection"}
shell_injection = {skip: false, message: "Possible shell injection via subprocess module"}
subprocess_popen_with_shell_equals_true = {skip: false, message: "subprocess call with shell=True"}
subprocess_without_shell_equals_false = {skip: false, message: "subprocess call without shell=False"}
start_process_with_a_shell = {skip: false, message: "Starting a process with a shell"}
start_process_with_no_shell = {skip: false, message: "Starting a process without a shell"}
start_process_with_partial_path = {skip: false, message: "Starting a process with a partial executable path"}

# Configure specific rules
[bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle", 
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]

shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]

subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output",
  "subprocess.run"
]